{"version":3,"sources":["logo.svg","Title.js","CodeSnippet.js","Question.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Title","react_default","a","createElement","className","href","Component","CodeSnippet","react_highlight_default","Question","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","current","imove","start","end","result","loading","cycle","bind","assertThisInitialized","handleInputChange","reset","_this2","setState","finalPosition","currIndex","arr","cycleArr","alert","i","push","length","places","unshift","pop","shift","setTimeout","undefined","event","target","value","name","defineProperty","_this3","src_CodeSnippet","htmlFor","required","placeholder","onChange","type","onClick","Footer","App","src_Title","src_Question","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.785571bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './App.css';\n\nclass Title extends Component {\n    render() {\n        return (\n            <div className=\"Title\">\n                <h2 className=\"blue-text\">mobileLIVE Written Assessment</h2>\n                <p>The solution to the assessment was written in <i>JavaScript, React, HTML, & CSS</i>. You will find my thought process\n                behind the solution on this page followed by instructions to run the program. I have also displayed my source\n                code for the program and you can test it out yourself. If you have any issues, please contact me at\n                <a href={\"mailto:puranikkartik@gmail.com\"} > puranikkartik@gmail.com</a> and I will get back to you as soon\n                as possible.</p>\n            </div>\n        );\n    }\n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport Highlight from 'react-highlight'\nimport './App.css';\n\nclass CodeSnippet extends Component {\n    render() {\n        return (\n            <div className=\"code-box\">\n                <Highlight className=\"code-snippet\">\n                <code>{`\nconst cycle = (current, imove, start, end) => {\n\n    //Check if number of moves exist\n    if (imove == 0) {\n        return current;\n    }\n    let arr = [];\n    let cycleArr = [];\n    let finalPosition;\n    let currIndex\n\n    //populate both arrays with start to end elements\n    for (let i = start; i <= end; i++) {\n        arr.push(i);\n        cycleArr.push(i);\n    }\n\n    for (let i = 0; i < cycleArr.length; i++) {\n        //loop until current value is seen\n        if (cycleArr[i] == current) {\n            currIndex = i; //keep record of current value index\n            let places = 0;\n            //for rightward shifting\n            if (imove > 0) {\n                while (places < imove) {\n                    cycleArr.unshift(cycleArr.pop());\n                    places++;\n                    currIndex++; //update current value index\n                    //if index exceeds array length, go to start\n                    if (currIndex >= 5) {\n                        currIndex = 0;\n                    }\n                }\n            }\n            //for leftward shifting\n            else {\n                while (places > imove) {\n                    cycleArr.push(cycleArr.shift());\n                    places--;\n                    currIndex--; //update current value index\n                    //if index goes below zero\n                    if (currIndex < 0) {\n                        currIndex = cycleArr.length - 1;\n                    }\n                }\n            }\n            break;\n        }\n    }\n\n    //final position is shifted current value index in original array\n    finalPosition = arr[currIndex];\n    return finalPosition;\n\n}`\n                }</code>\n                </Highlight>\n            </div>\n        );\n    }\n}\n\nexport default CodeSnippet;\n","import React, { Component } from 'react';\nimport './App.css';\nimport CodeSnippet from \"./CodeSnippet\";\n\nclass Question extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            current: 3,\n            imove: 1,\n            start: 1,\n            end: 5,\n            result: '',\n            loading: false\n        };\n\n        this.cycle = this.cycle.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n\n    cycle(current, imove, start, end) {\n\n        //Check if parameter values are entered or not\n        if(imove === '' || current === '' || start === '' || end === '') {\n            alert(\"Please enter the required values\");\n            return;\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        let arr = [];\n        let cycleArr = [];\n        let finalPosition;\n        let currIndex;\n\n        if(!(current >= start && current <= end)) {\n            alert(\"Error: Current value must be between start and end\");\n            this.reset();\n            this.setState({\n                loading: false\n            })\n        }\n\n        //populate both arrays with start to end elements\n        for(let i=start; i<=end; i++) {\n            arr.push(i);\n            cycleArr.push(i);\n        }\n\n        if(imove > arr.length) {\n            alert(\"Error: # of moves must be less than or equal to length of array\");\n            this.reset();\n            this.setState({\n                loading: false\n            })\n        }\n\n        for(let i=0; i<cycleArr.length; i++) {\n            //loop until current value is seen\n            if(cycleArr[i] == current) {\n                currIndex = i; //keep record of current value index\n                let places = 0;\n                //for rightward shifting\n                if(imove > 0) {\n                    while(places<imove) {\n                        cycleArr.unshift(cycleArr.pop());\n                        places++;\n                        currIndex++; //update current value index\n                        //if index exceeds array length, go to start\n                        if(currIndex>=5) {\n                            currIndex = 0;\n                        }\n                    }\n                    //for leftward shifting\n                } else {\n                    while(places>imove) {\n                        cycleArr.push(cycleArr.shift());\n                        places--;\n                        currIndex--; //update current value index\n                        //if index goes below zero\n                        if(currIndex < 0) {\n                            currIndex = cycleArr.length-1;\n                        }\n                    }\n                }\n                break;\n            }\n        }\n\n        //final position is shifted current value index in original array\n        finalPosition = arr[currIndex];\n        //return finalPosition;\n        setTimeout(() => {\n            this.setState({\n                loading: false,\n                result: finalPosition\n            });\n        }, 1000)\n\n    }\n\n    reset() {\n        if(this.state.current !== undefined && this.state.imove !== undefined && this.state.start !== undefined && this.state.end !== undefined) {\n            this.setState({\n                current: '',\n                imove: '',\n                start: '',\n                end: '',\n                result: ''\n            });\n        }\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"Question\">\n                <h3 className=\"blue-text\">Question</h3>\n                <p>Write a <code className=\"code-styled\">function</code> to return the final position after\n                    increasing or decreasing an <code className=\"code-styled\">int</code> with a min (starting point)\n                    and max (ending point) number.</p>\n                <h4 className=\"blue-text\">Method Objective</h4>\n                <ul><li>The first parameter is the current position.</li>\n                    <li>The 2nd parameter is the # of moves (negative means going backwards or left).</li>\n                    <li>The 3rd parameter is the first number of the array, 4th is the last.</li>\n                    <li>If end / start of array is reached, loop from the other end again.</li>\n                </ul>\n                <h4 className=\"blue-text\">Thought process</h4>\n                <p>The idea is to first populate two different arrays with elements from\n                    <code className=\"code-styled\">start</code> to <code className=\"code-styled\">end</code>.\n                    Then loop through the cycle array until the current value is seen, and when it is seen,\n                    shift the cycle array left or right for the given number of moves depending on the sign of\n                    <code className=\"code-styled\">imove</code>. Keep track of the index of the current value in the new shifted array.\n                    The final position is the value of the element in new current index in the original array.</p>\n                <h4 className=\"blue-text\">Instructions</h4>\n                <ol>\n                    <li>Enter appropriate values for the different input parameters. Some examples are provided below.</li>\n                    <li>Hit the <code className=\"code-styled\">Run Code</code> button to compile the program.</li>\n                    <li>Simply wait and see and the result on your screen.</li>\n                    <li>Hit the <code className=\"code-styled\">Reset</code> button to start over.</li>\n                    <li>Enjoy!</li>\n                </ol>\n                <h4 className=\"blue-text\">Examples</h4>\n                <ul>\n                    <li>this.cycle(3,1,1,5); // [1,2,<b>3</b>,<b>4</b>,5] , result is 4</li>\n                    <li>this.cycle(7,-2,3,7); // [3,4,<b>5</b>,6,<b>7</b>] , result is 5</li>\n                    <li>this.cycle(3,-3,1,5); // [1,2,<b>3</b>,4,<b>5</b>] , result is 5</li>\n                    <li>this.cycle(3,3,1,5); // [<b>1</b>,2,<b>3</b>,4,5] , result is 1</li>\n                </ul>\n                <div className=\"Answer\">\n                    <h4 className=\"blue-text\">Code</h4>\n                    <CodeSnippet/>\n                </div>\n                <div className=\"input-group\">\n                    <div className=\"input-item\">\n                        <label htmlFor=\"current\">Current</label>\n                        <input name=\"current\" required placeholder=\"Enter value\" value={this.state.current} onChange={this.handleInputChange}/>\n                    </div>\n                    <div className=\"input-item\">\n                        <label htmlFor=\"imove\"># of Moves</label>\n                        <input name=\"imove\" required placeholder=\"Enter value\" value={this.state.imove} onChange={this.handleInputChange}/>\n                    </div>\n                    <div className=\"input-item\">\n                        <label htmlFor=\"start\">Start</label>\n                        <input name=\"start\" required placeholder=\"Enter value\" value={this.state.start} onChange={this.handleInputChange}/>\n                    </div>\n                    <div className=\"input-item\">\n                        <label htmlFor=\"end\">End</label>\n                        <input name=\"end\" required placeholder=\"Enter value\" value={this.state.end} onChange={this.handleInputChange}/>\n                    </div>\n                </div>\n                <div className=\"input-result\">\n                    {this.state.loading && <h1>Compiling...</h1>}\n                    {this.state.result && <h1>The result is {this.state.result} </h1>}\n                </div>\n                <div className=\"input-button\">\n                    <button className=\"button\" type=\"submit\" onClick={() => this.cycle(this.state.current, this.state.imove, this.state.start, this.state.end)}>\n                        Run Code\n                    </button>\n                    <button className=\"button\" onClick={this.reset}>\n                        Reset\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Question;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Footer extends Component {\n    render() {\n        return (\n            <div className=\"Footer\">\n                <footer><h4>This assessment was completed by Kartik Puranik Karkala <a href=\"mailto:puranikkartik@gmail.com\" target=\"_top\">(puranikkartik@gmail.com)</a> on February 11, 2019.</h4></footer>\n            </div>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Title from \"./Title\";\nimport Question from \"./Question\";\nimport Footer from \"./Footer\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Title/>\n        <Question/>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}